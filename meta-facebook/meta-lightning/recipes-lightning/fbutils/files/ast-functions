# Copyright 2014-present Facebook. All Rights Reserved.
DEVMEM=/sbin/devmem
GPIO_Tolerant_AtoD=0x1e78001c
GPIO_Tolerant_EtoH=0x1e78003c
GPIO_Tolerant_ItoL=0x1e7800ac
GPIO_Tolerant_MtoP=0x1e7800fc
GPIO_Tolerant_QtoT=0x1e78012c
GPIO_Tolerant_UtoX=0x1e78015c
GPIO_Tolerant_YtoAB=0x1e78018c

devmem_set_bit() {
    local addr
    local val
    addr=$1
    val=$($DEVMEM $addr)
    val=$((val | (0x1 << $2)))
    $DEVMEM $addr 32 $val
}

devmem_clear_bit() {
    local addr
    local val
    addr=$1
    val=$($DEVMEM $addr)
    val=$((val & ~(0x1 << $2)))
    $DEVMEM $addr 32 $val
}

scu_addr() {
    echo $((0x1E6E2000 + 0x$1))
}

GPIODIR="/sys/class/gpio"
GPIOEXPORT="$GPIODIR/export"

gpio_dir() {
    echo "$GPIODIR/gpio$1"
}

gpio_name2value() {
    local first remaining base val
    remaining=$1
    val=0
    while [ -n "$remaining" ]; do
        first=${remaining:0:1}
        case "$first" in
            [[:lower:]])
                base=$(printf "%d" "'$first'")
                base=$((base - 96))
                val=$((val * 26 + base))
                ;;
            [[:upper:]])
                base=$(printf "%d" "'$first'")
                base=$((base - 64))
                val=$((val * 26 + base))
                ;;
            *)
                if [ $val -gt 0 ]; then
                    val=$((val-1))
                fi
                val=$((val * 8 + $remaining))
                break
                ;;
        esac
        remaining=${remaining:1}
    done
    echo "$val"
}

gpio_export() {
    local gpio
    gpio=$(gpio_name2value $1)
    dir=$(gpio_dir $gpio)
    if [ ! -d ${dir} ]; then
        echo $gpio > $GPIOEXPORT
    fi
}

gpio_set() {
    local gpio
    local val
    gpio=$(gpio_name2value $1)
    val=$2
    dir=$(gpio_dir $gpio)
    if [ ! -d ${dir} ]; then
        echo $gpio > $GPIOEXPORT
    fi
    echo $val > ${dir}/value
    echo out > ${dir}/direction
}

gpio_get() {
    local gpio
    local val
    gpio=$(gpio_name2value $1)
    dir=$(gpio_dir $gpio)
    if [ ! -d ${dir} ]; then
        echo $gpio > $GPIOEXPORT
    fi
    echo in > ${dir}/direction
    cat ${dir}/value
}

# Check to see if BMC power-on-reset
is_bmc_por() {
    local val
    # Read the Watch Dog Counter
    val=$(devmem 0x1e785010 2>/dev/null)
    if [ "$((val & 0xff00))" == "0" ]; then
        # Power ON Reset
        echo 1
    else
        echo 0
    fi
}

# Check to see if server is present in given slot or not
is_server_prsnt() {
  local prsnt

  case $1 in
    1)
      prsnt=$(gpio_get H5)
      ;;
    2)
      prsnt=$(gpio_get H4)
      ;;
    3)
      prsnt=$(gpio_get H7)
      ;;
    4)
      prsnt=$(gpio_get H6)
      ;;
    *)
      prsnt=$(gpio_get H4)
      ;;
  esac

  if [ $prsnt == "0" ]; then
    echo 1
  else                                       
    echo 0
  fi
}

yosemite_is_server_on() {
    local curr_pwr_cpu
    curr_pwr_cpu=$(python -c 'import sys; sys.path.append("/usr/local/fbpackages/utils"); import power_util; print power_util.get_pwr_cpu()')
    if [ $curr_pwr_cpu == "1" ]; then
        echo 1
    else
        echo 0
    fi
}

gpio_get_val() {
    local gpio
    local val
    gpio=$(gpio_name2value $1)
    dir=$(gpio_dir $gpio)
    if [ ! -d ${dir} ]; then
        echo $gpio > $GPIOEXPORT
    fi
    cat ${dir}/value
}

gpio_tolerance_fun() {
    local gpio
    offset=0
    gpio=$(gpio_name2value $1)
    offset=$((${gpio}/32))
    case "${offset}" in
    "0" ) 
    offset=$GPIO_Tolerant_AtoD
    ;;
    "1" ) 
    offset=$GPIO_Tolerant_EtoH
    ;;
    "2" ) 
    offset=$GPIO_Tolerant_ItoL
    ;;
    "3" ) 
    offset=$GPIO_Tolerant_MtoP
    ;;
    "4" ) 
    offset=$GPIO_Tolerant_QtoT
    ;;
    "5" ) 
    offset=$GPIO_Tolerant_UtoX
    ;;
    "6" ) 
    offset=$GPIO_Tolerant_YtoAB
    ;;
    esac
    set_bit=$((${gpio}%32))
    devmem_set_bit $offset $set_bit
    def_val=$(gpio_get_val $1)
    if [ $def_val == 1 ]; then
    gpio_set $1 1
    else
    gpio_set $1 0
    fi
}
